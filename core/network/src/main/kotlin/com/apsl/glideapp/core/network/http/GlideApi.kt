package com.apsl.glideapp.core.network.httpimport com.apsl.glideapp.common.dto.AppConfigDtoimport com.apsl.glideapp.common.dto.AuthResponseimport com.apsl.glideapp.common.dto.LoginRequestimport com.apsl.glideapp.common.dto.RegisterRequestimport com.apsl.glideapp.common.dto.RideDtoimport com.apsl.glideapp.common.dto.TransactionDtoimport com.apsl.glideapp.common.dto.TransactionRequestimport com.apsl.glideapp.common.dto.UserDtoimport com.apsl.glideapp.common.dto.ZoneDtoimport de.jensklingenberg.ktorfit.http.Bodyimport de.jensklingenberg.ktorfit.http.GETimport de.jensklingenberg.ktorfit.http.POSTimport de.jensklingenberg.ktorfit.http.Pathimport de.jensklingenberg.ktorfit.http.Queryinterface GlideApi {    @POST("api/login")    suspend fun login(@Body body: LoginRequest): AuthResponse    @POST("api/register")    suspend fun register(@Body body: RegisterRequest): AuthResponse    @GET("api/user")    suspend fun getUser(): UserDto    @GET("api/config")    suspend fun getAppConfig(): AppConfigDto    @GET("api/zone")    suspend fun getAllZones(): List<ZoneDto>    @GET("api/ride/{id}")    suspend fun getRideById(@Path("id") id: String): RideDto    @GET("api/ride")    suspend fun getUserRidesByStatus(        @Query("status") status: String,        @Query("page") page: Int? = null,        @Query("limit") limit: Int? = null    ): List<RideDto>    @GET("api/transaction")    suspend fun getUserTransactions(        @Query("page") page: Int? = null,        @Query("limit") limit: Int? = null    ): List<TransactionDto>    @POST("api/transaction")    suspend fun createTransaction(@Body body: TransactionRequest)}