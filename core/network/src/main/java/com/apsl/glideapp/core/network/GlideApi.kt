package com.apsl.glideapp.core.networkimport com.apsl.glideapp.common.dto.AppConfigDtoimport com.apsl.glideapp.common.dto.AuthResponseimport com.apsl.glideapp.common.dto.LoginRequestimport com.apsl.glideapp.common.dto.RegisterRequestimport com.apsl.glideapp.common.dto.RideDtoimport com.apsl.glideapp.common.dto.TransactionDtoimport com.apsl.glideapp.common.dto.TransactionRequestimport com.apsl.glideapp.common.dto.UserDtoimport com.apsl.glideapp.common.dto.ZoneDtoimport retrofit2.http.Bodyimport retrofit2.http.GETimport retrofit2.http.POSTimport retrofit2.http.Pathimport retrofit2.http.Queryinterface GlideApi {    @POST("api/login")    suspend fun login(@Body body: LoginRequest): AuthResponse    @POST("api/register")    suspend fun register(@Body body: RegisterRequest): AuthResponse    @GET("api/user")    suspend fun getUser(): UserDto    @GET("api/config")    suspend fun getAppConfig(): AppConfigDto    @GET("api/zone")    suspend fun getAllZones(): List<ZoneDto>    @GET("api/ride/{id}")    suspend fun getRideById(@Path("id") id: String): RideDto    @GET("api/ride")    suspend fun getUserRidesByStatus(        @Query("status") status: String,        @Query("page") page: Int? = null,        @Query("limit") limit: Int? = null    ): List<RideDto>    @GET("api/transaction")    suspend fun getUserTransactions(        @Query("page") page: Int? = null,        @Query("limit") limit: Int? = null    ): List<TransactionDto>    @POST("api/transaction")    suspend fun createTransaction(@Body body: TransactionRequest)}